[pycodestyle]
# https://pycodestyle.pycqa.org/en/latest/intro.html
# E125: continuation line with same indent as next logical line
# E126:	continuation line over-indented for hanging indent
# E127:	continuation line over-indented for visual indent
# E128:	continuation line under-indented for visual indent
# E266: too many leading '#' for block comment
# E402: module level import not at top of file
# W291: trailing whitespace
# W293: blank line contains whitespace
# W605: invalid escape sequence (in regular expression)
ignore = E125,E126,E127,E128,E266,E402,W291,W293,W605

exclude = src/protocol_buffers/*,config.py,.git/
count = False
max-line-length = 150
statistics = False
format = pylint

[pydocstyle]
# configure pydocstyle (pip3 install pydocstyle) for analyzing PETRI DISH
# source code. pydocstyle has some quirks that can make it difficult to
# configure.
#       - no exclude directories or files: they have a "match" (used for
#         including files) and a "match-dir" (used for including directories).
#       - no, you can't say something like "match=src/code/.*\.py" and think you
#         get all the files in the "src/code" that are Python files.
#       - don't add "..." or '...' to the lines or things won't work.

# match all files in `*.py` except those that start with any of the listed
# prefixes regardless of the directory/subdirectory they are in. (this is a
# sub-optimal way of handling this. it would have made more sense to have an
# "exclude=<pattern-or-list>". it has been suggested by the community but the
# author has basically said, "use a plugin 'cause we're not changing".)
#       - exclude all Protobuf and gRPC generated code
#       - exclude all Pytest code (found in src/tests/test_*.py)
#       - exclude all configuration code generated by quicktype.io or their
#         plugin
#       - exclude y2j.py (found in src/utils/y2j.py)

match = (?!__init__|config|test|AnalysisRequest|AnalysisResponse|y2j).*\.py

# there are three style conventions: `pep257` (default), `numpy`, and `google`.
# the plan was to start using `google` and tailor with `ignore`. that would be
# great but it doesn't work that way. you can only use one of `ignore`, `select`,
# or `convention`.

# here are the codes we don't want checked for:
#   D202 - No blank lines allowed after function docstring
#   D203 - 1 blank line required before class docstring
#   D212 - Multi-line docstring summary should start at the first line
#   D301 - Use r""" if any backslashes in a docstring

ignore = D202,D203,D212,D301
